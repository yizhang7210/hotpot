buildscript {
    ext {
        lombok = 'org.projectlombok:lombok:1.18.6'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.5'
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/yizhang7210/hotpot")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components["java"])
            artifactId = project.name
        }
    }
}

bintray {
    user = 'yizhang7210'
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    publish = true

    pkg {
        repo = 'hotpot'
        name = 'hotpot-core'
    }

}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_12
    targetCompatibility = JavaVersion.VERSION_12
    withSourcesJar()
    withJavadocJar()
}

version = generateVersion()

jar {
    manifest {
        attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": archiveVersion
        )
    }
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:2.2.4.RELEASE")
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework:spring-web"
    implementation "org.springframework.boot:spring-boot-autoconfigure"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    // Lombok
    compileOnly lombok
    annotationProcessor lombok
    testCompileOnly lombok
    testAnnotationProcessor lombok
}

static generateVersion() {
    def commitHash = 'git rev-parse --short HEAD'.execute().text.trim()
    def branchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    def snapshotSuffix = branchName == 'master' ? '' : '-SNAPSHOT'
    "0.${new Date().format('yyMMdd')}.${new Date().format('HHmmss')}-${commitHash}${snapshotSuffix}"
}

test {
    useJUnitPlatform()
}